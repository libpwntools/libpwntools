// <pwntools> -*- C++ -*-

/*
BSD 2-Clause License

Copyright (c) 2021, libpwntools
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#pragma once
#ifndef PWNTOOLS_H
#define PWNTOOLS_H
#include <stdio.h>
#include <string.h>

#include <cassert>
#include <cstddef>
#include <cstring>
#include <iostream>
#include <list>
#include <string>
#include <unordered_map>
#include <vector>
#define AMD64 64
#define I386 86

namespace pwn {
    void pause();
    std::string pack(uint64_t n);
    std::string pack(uint32_t n);
    std::string pack(int64_t n);
#ifdef __linux__
    std::string pack(unsigned long long n);
    std::string pack(long long n);
#endif
    std::string pack(int32_t n);
    std::string pack(const std::string &s);
    std::string p64(uint64_t n);
    std::string p32(uint32_t n);
    uint64_t u64(const std::string &buf);
    uint32_t u32(const std::string &buf);

    template <typename T> void impl_(std::string &buf, const T &t) {
        if constexpr (std::is_integral_v<T>)
            buf += std::string((char *)&t, sizeof(T));
        else
            buf += pwn::pack(t);
    }

    template <typename... T> std::string flat(T... args) {
        std::string buf;
        int dummy[] = {(impl_(buf, std::forward<T>(args)), 0)...};
        return buf;
    }

#ifdef __linux__
    class file {
      public:
        FILE *fp;
        file();
        std::string construct();
        ~file();
    };
#endif

    class SigReturnFrame {
      public:
        std::string arch;
        std::string kernel;
        uint32_t gs_32;
        uint32_t fs_32;
        uint32_t es_32;
        uint32_t ds_32;
        uint32_t edi_32;
        uint32_t esi_32;
        uint32_t ebp_32;
        uint32_t esp_32;
        uint32_t ebx_32;
        uint32_t edx_32;
        uint32_t ecx_32;
        uint32_t eax_32;
        uint32_t trapno_32;
        uint32_t err_32;
        uint32_t eip_32;
        uint32_t cs_32;
        uint32_t eflags_32;
        uint32_t esp_at_signal_32;
        uint32_t ss_32;
        uint32_t fpstate_32;

        uint64_t uc_flags;
        uint64_t uc;
        uint64_t uc_stack_ss_sp;
        uint64_t uc_stack_ss_flags;
        uint64_t uc_stack_ss_size;
        uint64_t r8;
        uint64_t r9;
        uint64_t r10;
        uint64_t r11;
        uint64_t r12;
        uint64_t r13;
        uint64_t r14;
        uint64_t r15;
        uint64_t rdi;
        uint64_t rsi;
        uint64_t rbp;
        uint64_t rbx;
        uint64_t rdx;
        uint64_t rax;
        uint64_t rcx;
        uint64_t rsp;
        uint64_t rip;
        uint64_t eflags_64;
        uint64_t csgsfs;
        uint64_t err_64;
        uint64_t trapno_64;
        uint64_t oldmask_64;
        uint64_t cr2_64;
        uint64_t fpstate_64;
        uint64_t reserved;
        uint64_t sigmask;
        SigReturnFrame(std::string kern, std::string file_arch);
        std::string construct_frame();
    };
}; // namespace pwn
#ifdef __linux__
#include <libpwntools/fmtstr.h>
#include <libpwntools/logger.h>
#include <libpwntools/process.h>
#include <libpwntools/pwnelf.h>
#include <libpwntools/remote.h>
#include <libpwntools/utils.h>
#elif _WIN32
#include "fmtstr.h"
#include "logger.h"
#include "process.h"
#include "remote.h"
#include "utils.h"
#endif

#endif
